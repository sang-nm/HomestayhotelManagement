//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomestayhotelManagement.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContainerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HomestayhotelManagement.ServiceReference1.Binary UserPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContainerName {
            get {
                return this.ContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainerNameField, value) != true)) {
                    this.ContainerNameField = value;
                    this.RaisePropertyChanged("ContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoleID {
            get {
                return this.RoleIDField;
            }
            set {
                if ((this.RoleIDField.Equals(value) != true)) {
                    this.RoleIDField = value;
                    this.RaisePropertyChanged("RoleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HomestayhotelManagement.ServiceReference1.Binary UserPassword {
            get {
                return this.UserPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPasswordField, value) != true)) {
                    this.UserPasswordField = value;
                    this.RaisePropertyChanged("UserPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Binary", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Linq")]
    [System.SerializableAttribute()]
    public partial class Binary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BytesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Role", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Role : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID {
            get {
                return this.RoleIDField;
            }
            set {
                if ((this.RoleIDField.Equals(value) != true)) {
                    this.RoleIDField = value;
                    this.RaisePropertyChanged("RoleID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceID {
            get {
                return this.ServiceIDField;
            }
            set {
                if ((this.ServiceIDField.Equals(value) != true)) {
                    this.ServiceIDField = value;
                    this.RaisePropertyChanged("ServiceID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Room : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> HotelIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RatingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoomNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TypeIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HotelID {
            get {
                return this.HotelIDField;
            }
            set {
                if ((this.HotelIDField.Equals(value) != true)) {
                    this.HotelIDField = value;
                    this.RaisePropertyChanged("HotelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RatingID {
            get {
                return this.RatingIDField;
            }
            set {
                if ((this.RatingIDField.Equals(value) != true)) {
                    this.RatingIDField = value;
                    this.RaisePropertyChanged("RatingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomID {
            get {
                return this.RoomIDField;
            }
            set {
                if ((this.RoomIDField.Equals(value) != true)) {
                    this.RoomIDField = value;
                    this.RaisePropertyChanged("RoomID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoomNumber {
            get {
                return this.RoomNumberField;
            }
            set {
                if ((this.RoomNumberField.Equals(value) != true)) {
                    this.RoomNumberField = value;
                    this.RaisePropertyChanged("RoomNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TypeID {
            get {
                return this.TypeIDField;
            }
            set {
                if ((this.TypeIDField.Equals(value) != true)) {
                    this.TypeIDField = value;
                    this.RaisePropertyChanged("TypeID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> HotelIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoomIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HotelID {
            get {
                return this.HotelIDField;
            }
            set {
                if ((this.HotelIDField.Equals(value) != true)) {
                    this.HotelIDField = value;
                    this.RaisePropertyChanged("HotelID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageID {
            get {
                return this.ImageIDField;
            }
            set {
                if ((this.ImageIDField.Equals(value) != true)) {
                    this.ImageIDField = value;
                    this.RaisePropertyChanged("ImageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoomID {
            get {
                return this.RoomIDField;
            }
            set {
                if ((this.RoomIDField.Equals(value) != true)) {
                    this.RoomIDField = value;
                    this.RaisePropertyChanged("RoomID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IHomeStay")]
    public interface IHomeStay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleUser", ReplyAction="http://tempuri.org/IHomeStay/getSingleUserResponse")]
        HomestayhotelManagement.ServiceReference1.User getSingleUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleUser", ReplyAction="http://tempuri.org/IHomeStay/getSingleUserResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User> getSingleUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllUser", ReplyAction="http://tempuri.org/IHomeStay/getAllUserResponse")]
        HomestayhotelManagement.ServiceReference1.User[] getAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllUser", ReplyAction="http://tempuri.org/IHomeStay/getAllUserResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User[]> getAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindUsers", ReplyAction="http://tempuri.org/IHomeStay/FindUsersResponse")]
        HomestayhotelManagement.ServiceReference1.User[] FindUsers(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindUsers", ReplyAction="http://tempuri.org/IHomeStay/FindUsersResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User[]> FindUsersAsync(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/checkLogin", ReplyAction="http://tempuri.org/IHomeStay/checkLoginResponse")]
        HomestayhotelManagement.ServiceReference1.User checkLogin(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/checkLogin", ReplyAction="http://tempuri.org/IHomeStay/checkLoginResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User> checkLoginAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertUser", ReplyAction="http://tempuri.org/IHomeStay/InsertUserResponse")]
        bool InsertUser(HomestayhotelManagement.ServiceReference1.User insertedUser, int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertUser", ReplyAction="http://tempuri.org/IHomeStay/InsertUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAsync(HomestayhotelManagement.ServiceReference1.User insertedUser, int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateUser", ReplyAction="http://tempuri.org/IHomeStay/UpdateUserResponse")]
        bool UpdateUser(HomestayhotelManagement.ServiceReference1.User updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateUser", ReplyAction="http://tempuri.org/IHomeStay/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(HomestayhotelManagement.ServiceReference1.User updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteUser", ReplyAction="http://tempuri.org/IHomeStay/DeleteUserResponse")]
        bool DeleteUser(HomestayhotelManagement.ServiceReference1.User deletedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteUser", ReplyAction="http://tempuri.org/IHomeStay/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(HomestayhotelManagement.ServiceReference1.User deletedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/SaveImage", ReplyAction="http://tempuri.org/IHomeStay/SaveImageResponse")]
        string SaveImage(System.Drawing.Bitmap bitmap, string linkToImageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/SaveImage", ReplyAction="http://tempuri.org/IHomeStay/SaveImageResponse")]
        System.Threading.Tasks.Task<string> SaveImageAsync(System.Drawing.Bitmap bitmap, string linkToImageName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleRole", ReplyAction="http://tempuri.org/IHomeStay/getSingleRoleResponse")]
        HomestayhotelManagement.ServiceReference1.Role getSingleRole(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleRole", ReplyAction="http://tempuri.org/IHomeStay/getSingleRoleResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Role> getSingleRoleAsync(int RoleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllRole", ReplyAction="http://tempuri.org/IHomeStay/getAllRoleResponse")]
        HomestayhotelManagement.ServiceReference1.Role[] getAllRole();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllRole", ReplyAction="http://tempuri.org/IHomeStay/getAllRoleResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Role[]> getAllRoleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindRoles", ReplyAction="http://tempuri.org/IHomeStay/FindRolesResponse")]
        HomestayhotelManagement.ServiceReference1.Role[] FindRoles(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindRoles", ReplyAction="http://tempuri.org/IHomeStay/FindRolesResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Role[]> FindRolesAsync(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertRole", ReplyAction="http://tempuri.org/IHomeStay/InsertRoleResponse")]
        bool InsertRole(HomestayhotelManagement.ServiceReference1.Role insertedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertRole", ReplyAction="http://tempuri.org/IHomeStay/InsertRoleResponse")]
        System.Threading.Tasks.Task<bool> InsertRoleAsync(HomestayhotelManagement.ServiceReference1.Role insertedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateRole", ReplyAction="http://tempuri.org/IHomeStay/UpdateRoleResponse")]
        bool UpdateRole(HomestayhotelManagement.ServiceReference1.Role updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateRole", ReplyAction="http://tempuri.org/IHomeStay/UpdateRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateRoleAsync(HomestayhotelManagement.ServiceReference1.Role updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteRole", ReplyAction="http://tempuri.org/IHomeStay/DeleteRoleResponse")]
        bool DeleteRole(HomestayhotelManagement.ServiceReference1.Role deletedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteRole", ReplyAction="http://tempuri.org/IHomeStay/DeleteRoleResponse")]
        System.Threading.Tasks.Task<bool> DeleteRoleAsync(HomestayhotelManagement.ServiceReference1.Role deletedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleService", ReplyAction="http://tempuri.org/IHomeStay/getSingleServiceResponse")]
        HomestayhotelManagement.ServiceReference1.Service getSingleService(int ServiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleService", ReplyAction="http://tempuri.org/IHomeStay/getSingleServiceResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service> getSingleServiceAsync(int ServiceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllService", ReplyAction="http://tempuri.org/IHomeStay/getAllServiceResponse")]
        HomestayhotelManagement.ServiceReference1.Service[] getAllService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllService", ReplyAction="http://tempuri.org/IHomeStay/getAllServiceResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service[]> getAllServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindService", ReplyAction="http://tempuri.org/IHomeStay/FindServiceResponse")]
        HomestayhotelManagement.ServiceReference1.Service[] FindService(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindService", ReplyAction="http://tempuri.org/IHomeStay/FindServiceResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service[]> FindServiceAsync(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertService", ReplyAction="http://tempuri.org/IHomeStay/InsertServiceResponse")]
        bool InsertService(HomestayhotelManagement.ServiceReference1.Service insertedService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertService", ReplyAction="http://tempuri.org/IHomeStay/InsertServiceResponse")]
        System.Threading.Tasks.Task<bool> InsertServiceAsync(HomestayhotelManagement.ServiceReference1.Service insertedService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateService", ReplyAction="http://tempuri.org/IHomeStay/UpdateServiceResponse")]
        bool UpdateService(HomestayhotelManagement.ServiceReference1.Service updatedService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateService", ReplyAction="http://tempuri.org/IHomeStay/UpdateServiceResponse")]
        System.Threading.Tasks.Task<bool> UpdateServiceAsync(HomestayhotelManagement.ServiceReference1.Service updatedService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteService", ReplyAction="http://tempuri.org/IHomeStay/DeleteServiceResponse")]
        bool DeleteService(HomestayhotelManagement.ServiceReference1.Service deletedService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteService", ReplyAction="http://tempuri.org/IHomeStay/DeleteServiceResponse")]
        System.Threading.Tasks.Task<bool> DeleteServiceAsync(HomestayhotelManagement.ServiceReference1.Service deletedService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleRoom", ReplyAction="http://tempuri.org/IHomeStay/getSingleRoomResponse")]
        HomestayhotelManagement.ServiceReference1.Room getSingleRoom(int roomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getSingleRoom", ReplyAction="http://tempuri.org/IHomeStay/getSingleRoomResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Room> getSingleRoomAsync(int roomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllRoom", ReplyAction="http://tempuri.org/IHomeStay/getAllRoomResponse")]
        HomestayhotelManagement.ServiceReference1.Room[] getAllRoom();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/getAllRoom", ReplyAction="http://tempuri.org/IHomeStay/getAllRoomResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Room[]> getAllRoomAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindRoom", ReplyAction="http://tempuri.org/IHomeStay/FindRoomResponse")]
        HomestayhotelManagement.ServiceReference1.Room[] FindRoom(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/FindRoom", ReplyAction="http://tempuri.org/IHomeStay/FindRoomResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Room[]> FindRoomAsync(string NameKeyword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertRoom", ReplyAction="http://tempuri.org/IHomeStay/InsertRoomResponse")]
        int InsertRoom(HomestayhotelManagement.ServiceReference1.Room insertedRoom, HomestayhotelManagement.ServiceReference1.Service[] services);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertRoom", ReplyAction="http://tempuri.org/IHomeStay/InsertRoomResponse")]
        System.Threading.Tasks.Task<int> InsertRoomAsync(HomestayhotelManagement.ServiceReference1.Room insertedRoom, HomestayhotelManagement.ServiceReference1.Service[] services);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateRoom", ReplyAction="http://tempuri.org/IHomeStay/UpdateRoomResponse")]
        int UpdateRoom(HomestayhotelManagement.ServiceReference1.Room updatedRoom, HomestayhotelManagement.ServiceReference1.Service[] services);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/UpdateRoom", ReplyAction="http://tempuri.org/IHomeStay/UpdateRoomResponse")]
        System.Threading.Tasks.Task<int> UpdateRoomAsync(HomestayhotelManagement.ServiceReference1.Room updatedRoom, HomestayhotelManagement.ServiceReference1.Service[] services);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteRoom", ReplyAction="http://tempuri.org/IHomeStay/DeleteRoomResponse")]
        bool DeleteRoom(HomestayhotelManagement.ServiceReference1.Room deletedRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteRoom", ReplyAction="http://tempuri.org/IHomeStay/DeleteRoomResponse")]
        System.Threading.Tasks.Task<bool> DeleteRoomAsync(HomestayhotelManagement.ServiceReference1.Room deletedRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteAllRoom_ServicebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/DeleteAllRoom_ServicebyRoomIDResponse")]
        bool DeleteAllRoom_ServicebyRoomID(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteAllRoom_ServicebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/DeleteAllRoom_ServicebyRoomIDResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllRoom_ServicebyRoomIDAsync(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/GetAllServiceByRoomID", ReplyAction="http://tempuri.org/IHomeStay/GetAllServiceByRoomIDResponse")]
        HomestayhotelManagement.ServiceReference1.Service[] GetAllServiceByRoomID(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/GetAllServiceByRoomID", ReplyAction="http://tempuri.org/IHomeStay/GetAllServiceByRoomIDResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service[]> GetAllServiceByRoomIDAsync(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/GetAllImagebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/GetAllImagebyRoomIDResponse")]
        HomestayhotelManagement.ServiceReference1.Image[] GetAllImagebyRoomID(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/GetAllImagebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/GetAllImagebyRoomIDResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Image[]> GetAllImagebyRoomIDAsync(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/GetFirstImagebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/GetFirstImagebyRoomIDResponse")]
        HomestayhotelManagement.ServiceReference1.Image GetFirstImagebyRoomID(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/GetFirstImagebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/GetFirstImagebyRoomIDResponse")]
        System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Image> GetFirstImagebyRoomIDAsync(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertImage", ReplyAction="http://tempuri.org/IHomeStay/InsertImageResponse")]
        bool InsertImage(HomestayhotelManagement.ServiceReference1.Image InsertedImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertImage", ReplyAction="http://tempuri.org/IHomeStay/InsertImageResponse")]
        System.Threading.Tasks.Task<bool> InsertImageAsync(HomestayhotelManagement.ServiceReference1.Image InsertedImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertListImage", ReplyAction="http://tempuri.org/IHomeStay/InsertListImageResponse")]
        bool InsertListImage(HomestayhotelManagement.ServiceReference1.Image[] lstImages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/InsertListImage", ReplyAction="http://tempuri.org/IHomeStay/InsertListImageResponse")]
        System.Threading.Tasks.Task<bool> InsertListImageAsync(HomestayhotelManagement.ServiceReference1.Image[] lstImages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteAllImagebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/DeleteAllImagebyRoomIDResponse")]
        bool DeleteAllImagebyRoomID(int RoomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHomeStay/DeleteAllImagebyRoomID", ReplyAction="http://tempuri.org/IHomeStay/DeleteAllImagebyRoomIDResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllImagebyRoomIDAsync(int RoomID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHomeStayChannel : HomestayhotelManagement.ServiceReference1.IHomeStay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HomeStayClient : System.ServiceModel.ClientBase<HomestayhotelManagement.ServiceReference1.IHomeStay>, HomestayhotelManagement.ServiceReference1.IHomeStay {
        
        public HomeStayClient() {
        }
        
        public HomeStayClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HomeStayClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HomeStayClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HomeStayClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HomestayhotelManagement.ServiceReference1.User getSingleUser(int userID) {
            return base.Channel.getSingleUser(userID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User> getSingleUserAsync(int userID) {
            return base.Channel.getSingleUserAsync(userID);
        }
        
        public HomestayhotelManagement.ServiceReference1.User[] getAllUser() {
            return base.Channel.getAllUser();
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User[]> getAllUserAsync() {
            return base.Channel.getAllUserAsync();
        }
        
        public HomestayhotelManagement.ServiceReference1.User[] FindUsers(string NameKeyword) {
            return base.Channel.FindUsers(NameKeyword);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User[]> FindUsersAsync(string NameKeyword) {
            return base.Channel.FindUsersAsync(NameKeyword);
        }
        
        public HomestayhotelManagement.ServiceReference1.User checkLogin(string UserName, string Password) {
            return base.Channel.checkLogin(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.User> checkLoginAsync(string UserName, string Password) {
            return base.Channel.checkLoginAsync(UserName, Password);
        }
        
        public bool InsertUser(HomestayhotelManagement.ServiceReference1.User insertedUser, int RoleID) {
            return base.Channel.InsertUser(insertedUser, RoleID);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAsync(HomestayhotelManagement.ServiceReference1.User insertedUser, int RoleID) {
            return base.Channel.InsertUserAsync(insertedUser, RoleID);
        }
        
        public bool UpdateUser(HomestayhotelManagement.ServiceReference1.User updatedUser) {
            return base.Channel.UpdateUser(updatedUser);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(HomestayhotelManagement.ServiceReference1.User updatedUser) {
            return base.Channel.UpdateUserAsync(updatedUser);
        }
        
        public bool DeleteUser(HomestayhotelManagement.ServiceReference1.User deletedUser) {
            return base.Channel.DeleteUser(deletedUser);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(HomestayhotelManagement.ServiceReference1.User deletedUser) {
            return base.Channel.DeleteUserAsync(deletedUser);
        }
        
        public string SaveImage(System.Drawing.Bitmap bitmap, string linkToImageName) {
            return base.Channel.SaveImage(bitmap, linkToImageName);
        }
        
        public System.Threading.Tasks.Task<string> SaveImageAsync(System.Drawing.Bitmap bitmap, string linkToImageName) {
            return base.Channel.SaveImageAsync(bitmap, linkToImageName);
        }
        
        public HomestayhotelManagement.ServiceReference1.Role getSingleRole(int RoleID) {
            return base.Channel.getSingleRole(RoleID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Role> getSingleRoleAsync(int RoleID) {
            return base.Channel.getSingleRoleAsync(RoleID);
        }
        
        public HomestayhotelManagement.ServiceReference1.Role[] getAllRole() {
            return base.Channel.getAllRole();
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Role[]> getAllRoleAsync() {
            return base.Channel.getAllRoleAsync();
        }
        
        public HomestayhotelManagement.ServiceReference1.Role[] FindRoles(string NameKeyword) {
            return base.Channel.FindRoles(NameKeyword);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Role[]> FindRolesAsync(string NameKeyword) {
            return base.Channel.FindRolesAsync(NameKeyword);
        }
        
        public bool InsertRole(HomestayhotelManagement.ServiceReference1.Role insertedRole) {
            return base.Channel.InsertRole(insertedRole);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRoleAsync(HomestayhotelManagement.ServiceReference1.Role insertedRole) {
            return base.Channel.InsertRoleAsync(insertedRole);
        }
        
        public bool UpdateRole(HomestayhotelManagement.ServiceReference1.Role updatedUser) {
            return base.Channel.UpdateRole(updatedUser);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRoleAsync(HomestayhotelManagement.ServiceReference1.Role updatedUser) {
            return base.Channel.UpdateRoleAsync(updatedUser);
        }
        
        public bool DeleteRole(HomestayhotelManagement.ServiceReference1.Role deletedRole) {
            return base.Channel.DeleteRole(deletedRole);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRoleAsync(HomestayhotelManagement.ServiceReference1.Role deletedRole) {
            return base.Channel.DeleteRoleAsync(deletedRole);
        }
        
        public HomestayhotelManagement.ServiceReference1.Service getSingleService(int ServiceID) {
            return base.Channel.getSingleService(ServiceID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service> getSingleServiceAsync(int ServiceID) {
            return base.Channel.getSingleServiceAsync(ServiceID);
        }
        
        public HomestayhotelManagement.ServiceReference1.Service[] getAllService() {
            return base.Channel.getAllService();
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service[]> getAllServiceAsync() {
            return base.Channel.getAllServiceAsync();
        }
        
        public HomestayhotelManagement.ServiceReference1.Service[] FindService(string NameKeyword) {
            return base.Channel.FindService(NameKeyword);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service[]> FindServiceAsync(string NameKeyword) {
            return base.Channel.FindServiceAsync(NameKeyword);
        }
        
        public bool InsertService(HomestayhotelManagement.ServiceReference1.Service insertedService) {
            return base.Channel.InsertService(insertedService);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServiceAsync(HomestayhotelManagement.ServiceReference1.Service insertedService) {
            return base.Channel.InsertServiceAsync(insertedService);
        }
        
        public bool UpdateService(HomestayhotelManagement.ServiceReference1.Service updatedService) {
            return base.Channel.UpdateService(updatedService);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServiceAsync(HomestayhotelManagement.ServiceReference1.Service updatedService) {
            return base.Channel.UpdateServiceAsync(updatedService);
        }
        
        public bool DeleteService(HomestayhotelManagement.ServiceReference1.Service deletedService) {
            return base.Channel.DeleteService(deletedService);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServiceAsync(HomestayhotelManagement.ServiceReference1.Service deletedService) {
            return base.Channel.DeleteServiceAsync(deletedService);
        }
        
        public HomestayhotelManagement.ServiceReference1.Room getSingleRoom(int roomID) {
            return base.Channel.getSingleRoom(roomID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Room> getSingleRoomAsync(int roomID) {
            return base.Channel.getSingleRoomAsync(roomID);
        }
        
        public HomestayhotelManagement.ServiceReference1.Room[] getAllRoom() {
            return base.Channel.getAllRoom();
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Room[]> getAllRoomAsync() {
            return base.Channel.getAllRoomAsync();
        }
        
        public HomestayhotelManagement.ServiceReference1.Room[] FindRoom(string NameKeyword) {
            return base.Channel.FindRoom(NameKeyword);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Room[]> FindRoomAsync(string NameKeyword) {
            return base.Channel.FindRoomAsync(NameKeyword);
        }
        
        public int InsertRoom(HomestayhotelManagement.ServiceReference1.Room insertedRoom, HomestayhotelManagement.ServiceReference1.Service[] services) {
            return base.Channel.InsertRoom(insertedRoom, services);
        }
        
        public System.Threading.Tasks.Task<int> InsertRoomAsync(HomestayhotelManagement.ServiceReference1.Room insertedRoom, HomestayhotelManagement.ServiceReference1.Service[] services) {
            return base.Channel.InsertRoomAsync(insertedRoom, services);
        }
        
        public int UpdateRoom(HomestayhotelManagement.ServiceReference1.Room updatedRoom, HomestayhotelManagement.ServiceReference1.Service[] services) {
            return base.Channel.UpdateRoom(updatedRoom, services);
        }
        
        public System.Threading.Tasks.Task<int> UpdateRoomAsync(HomestayhotelManagement.ServiceReference1.Room updatedRoom, HomestayhotelManagement.ServiceReference1.Service[] services) {
            return base.Channel.UpdateRoomAsync(updatedRoom, services);
        }
        
        public bool DeleteRoom(HomestayhotelManagement.ServiceReference1.Room deletedRoom) {
            return base.Channel.DeleteRoom(deletedRoom);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRoomAsync(HomestayhotelManagement.ServiceReference1.Room deletedRoom) {
            return base.Channel.DeleteRoomAsync(deletedRoom);
        }
        
        public bool DeleteAllRoom_ServicebyRoomID(int RoomID) {
            return base.Channel.DeleteAllRoom_ServicebyRoomID(RoomID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllRoom_ServicebyRoomIDAsync(int RoomID) {
            return base.Channel.DeleteAllRoom_ServicebyRoomIDAsync(RoomID);
        }
        
        public HomestayhotelManagement.ServiceReference1.Service[] GetAllServiceByRoomID(int RoomID) {
            return base.Channel.GetAllServiceByRoomID(RoomID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Service[]> GetAllServiceByRoomIDAsync(int RoomID) {
            return base.Channel.GetAllServiceByRoomIDAsync(RoomID);
        }
        
        public HomestayhotelManagement.ServiceReference1.Image[] GetAllImagebyRoomID(int RoomID) {
            return base.Channel.GetAllImagebyRoomID(RoomID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Image[]> GetAllImagebyRoomIDAsync(int RoomID) {
            return base.Channel.GetAllImagebyRoomIDAsync(RoomID);
        }
        
        public HomestayhotelManagement.ServiceReference1.Image GetFirstImagebyRoomID(int RoomID) {
            return base.Channel.GetFirstImagebyRoomID(RoomID);
        }
        
        public System.Threading.Tasks.Task<HomestayhotelManagement.ServiceReference1.Image> GetFirstImagebyRoomIDAsync(int RoomID) {
            return base.Channel.GetFirstImagebyRoomIDAsync(RoomID);
        }
        
        public bool InsertImage(HomestayhotelManagement.ServiceReference1.Image InsertedImage) {
            return base.Channel.InsertImage(InsertedImage);
        }
        
        public System.Threading.Tasks.Task<bool> InsertImageAsync(HomestayhotelManagement.ServiceReference1.Image InsertedImage) {
            return base.Channel.InsertImageAsync(InsertedImage);
        }
        
        public bool InsertListImage(HomestayhotelManagement.ServiceReference1.Image[] lstImages) {
            return base.Channel.InsertListImage(lstImages);
        }
        
        public System.Threading.Tasks.Task<bool> InsertListImageAsync(HomestayhotelManagement.ServiceReference1.Image[] lstImages) {
            return base.Channel.InsertListImageAsync(lstImages);
        }
        
        public bool DeleteAllImagebyRoomID(int RoomID) {
            return base.Channel.DeleteAllImagebyRoomID(RoomID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllImagebyRoomIDAsync(int RoomID) {
            return base.Channel.DeleteAllImagebyRoomIDAsync(RoomID);
        }
    }
}
